services:
  api-gateway:
    build:
      context: .
      dockerfile: apps/api-gateway/Dockerfile
    ports:
      - '3000:3000'
    environment:
      - FAVORITE_PRODUCTS_COUNT=${FAVORITE_PRODUCTS_COUNT}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    depends_on:
      - redis
      - mysql-customers
      - mysql-products
    restart: unless-stopped
    networks:
      - redis-network
      - customers-network
      - product-network

  customers-service:
    build:
      context: .
      dockerfile: apps/customers-service/Dockerfile
    environment:
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - MYSQL_CUSTOMERS_URL=${MYSQL_CUSTOMERS_URL}
    depends_on:
      mysql-customers:
        condition: service_healthy
      redis:
        condition: service_started
    restart: unless-stopped
    networks:
      - redis-network
      - customers-network
    # Run Prisma migrations and start the service
    command: sh -c "npx prisma db push --schema=./apps/customers-service/prisma/schema.prisma && node dist/apps/customers-service/main.js"

  products-service:
    build:
      context: .
      dockerfile: apps/products-service/Dockerfile
    environment:
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - MYSQL_PRODUCTS_URL=${MYSQL_PRODUCTS_URL}
    depends_on:
      mysql-products:
        condition: service_healthy
      redis:
        condition: service_started
    restart: unless-stopped
    networks:
      - redis-network
      - product-network
    # Run Prisma migrations and start the service
    command: sh -c "npx prisma db push --schema=./apps/products-service/prisma/schema.prisma && node dist/apps/products-service/main.js"
  mysql-customers:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_CUSTOMERS_ROOT_PASSWORD}
      MYSQL_USER: ${MYSQL_CUSTOMERS_USER}
      MYSQL_PASSWORD: ${MYSQL_CUSTOMERS_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_CUSTOMERS_DATABASE}
      TZ: ${TZ}

    healthcheck:
      test: ['CMD', 'mysqladmin', 'ping', '-h', 'mysql-customers']
      timeout: 20s
      retries: 10
    ports:
      - '${MYSQL_CUSTOMERS_PORT}:3306'
    volumes:
      - mysql_customers_data:/var/lib/mysql
      - ./mysql-customers-init:/docker-entrypoint-initdb.d
    restart: unless-stopped
    networks:
      - customers-network
      - adminer-network

  mysql-products:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_PRODUCTS_ROOT_PASSWORD}
      MYSQL_USER: ${MYSQL_PRODUCTS_USER}
      MYSQL_PASSWORD: ${MYSQL_PRODUCTS_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_PRODUCTS_DATABASE}
      TZ: ${TZ}
    healthcheck:
      test: ['CMD', 'mysqladmin', 'ping', '-h', 'mysql-products']
      timeout: 20s
      retries: 10
    ports:
      - '${MYSQL_PRODUCTS_PORT}:3306'
    volumes:
      - mysql_products_data:/var/lib/mysql
      - ./mysql-products-init:/docker-entrypoint-initdb.d
    restart: unless-stopped
    networks:
      - product-network
      - adminer-network

  redis:
    image: redis:latest
    ports:
      - '${REDIS_PORT}:6379'
    command: ['redis-server', '--requirepass', '${REDIS_PASSWORD}']
    volumes:
      - redis:/data
    restart: unless-stopped
    networks:
      - redis-network

  adminer:
    image: adminer
    ports:
      - '${ADMINER_PORT}:8080'
    restart: unless-stopped
    environment:
      ADMINER_DEFAULT_DB_DRIVER: mysql
      ADMINER_DESIGN: price
    depends_on:
      - mysql-customers
      - mysql-products
    networks:
      - adminer-network

networks:
  customers-network:
    driver: bridge
  product-network:
    driver: bridge
  redis-network:
    driver: bridge
  adminer-network:
    driver: bridge

volumes:
  mysql_customers_data:
  mysql_products_data:
  redis:
    driver: local
